use std::fmt::Display;

#[derive(Debug, PartialEq, Eq, Clone, Hash)]
pub enum DataTypes {
    Int,
    Float,
    Bool,
    Colour,
}

#[derive(Debug, PartialEq, Hash, Eq, Clone)]
pub enum TokenKind {
    Whitespace,
    Invalid,
    Newline,
    LBrace,
    RBrace,
    Equals,
    EqEq,
    LParen,
    RParen,
    LBracket,
    Semicolon,
    RBracket,
    SingleQuote,
    StringLiteral(String),
    Identifier(String),
    // Keywords
    For,
    If,
    Else,
    While,
    Function,
    Let,
    PadWidth,
    PadHeight,
    PadRead,
    PadRandI,
    Print,
    Delay,
    PixelR,
    Pixel,
    Return,
    // Binary operators
    Multiply,
    Divide,
    And,
    Plus,
    Minus,
    Or,
    // Relational operators
    LessThan,
    LessThanEqual,
    GreaterThan,
    GreaterThanEqual,
    Equal,
    NotEqual,
    // Types
    Type(DataTypes),
    // Type literals
    IntLiteral(i32),
    FloatLiteral(String),
    BoolLiteral(bool),
    ColourLiteral([u8; 3]),
    EndOfFile,
    Colon,
    Comment,
    Asterisk,
    DoubleQuote,
    Comma,
    Hashtag,
    PadWrite,
}

// // macro that takes in a lis tof tokens and returns the below match statement
// impl Display for TokenKind {
//     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
//         match self {

//             TokenKind::Whitespace => write!(f, "Whitespace"),
//             TokenKind::Invalid => write!(f, "Invalid"),
//             TokenKind::Newline => write!(f, "Newline"),
//             TokenKind::Comment => write!(f, "Comment"),
//             TokenKind::Equals => write!(f, "Equals"),
//             TokenKind::LBrace => write!(f, "LBrace"),
//             TokenKind::RBrace => write!(f, "RBrace"),
//             TokenKind::LParen => write!(f, "LParen"),
//             TokenKind::RParen => write!(f, "RParen"),
//             TokenKind::LBracket => write!(f, "LBracket"),
//             TokenKind::RBracket => write!(f, "RBracket"),
//             TokenKind::SingleQuote => write!(f, "SingleQuote"),
//             TokenKind::Comma => write!(f, "Comma"),
//             TokenKind::Hashtag => write!(f, "Hashtag"),
//             TokenKind::StringLiteral(s) => write!(f, "StringLiteral({s})"),
//             TokenKind::Multiply => write!(f, "Multiply"),
//             TokenKind::Divide => write!(f, "Divide"),
//             TokenKind::And => write!(f, "And"),
//             TokenKind::Plus => write!(f, "Plus"),
//             TokenKind::Minus => write!(f, "Minus"),
//             TokenKind::Or => write!(f, "Or"),
//             TokenKind::LessThan => write!(f, "LessThan"),
//             TokenKind::LessThanEqual => write!(f, "LessThanEqual"),
//             TokenKind::GreaterThan => write!(f, "GreaterThan"),
//             TokenKind::GreaterThanEqual => write!(f, "GreaterThanEqual"),
//             TokenKind::Equal => write!(f, "Equal"),
//             TokenKind::NotEqual => write!(f, "NotEqual"),
//             TokenKind::EqEq => write!(f, "EqEq"),
//             TokenKind::Semicolon => write!(f, "Semicolon"),
//             TokenKind::Colon => write!(f, "Colon"),
//             TokenKind::PadWidth => write!(f, "__width"),
//             TokenKind::PadHeight => write!(f, "__height"),
//             TokenKind::PadRead => write!(f, "__read"),
//             TokenKind::PadRandI => write!(f, "__randi"),
//             TokenKind::Print => write!(f, "__"),
//             TokenKind::Delay => write!(f, "__delay"),
//             TokenKind::PixelR => write!(f, "__pixelr"),
//             TokenKind::Pixel => write!(f, "__pixel"),
//             TokenKind::Return => write!(f, "Return"),
//             TokenKind::Let => write!(f, "Let"),
//             TokenKind::For => write!(f, "For"),
//             TokenKind::If => write!(f, "If"),
//             TokenKind::Else => write!(f, "Else"),
//             TokenKind::While => write!(f, "While"),
//             TokenKind::Function => write!(f, "Function"),
//             TokenKind::Type(DataTypes::Int) => write!(f, "IntType"),
//             TokenKind::Type(DataTypes::Float) => write!(f, "FloatType"),
//             TokenKind::Type(DataTypes::Bool) => write!(f, "BoolType"),
//             TokenKind::Type(DataTypes::Colour) => write!(f, "ColourType"),
//             TokenKind::IntLiteral(i) => write!(f, "Int({})", i),
//             TokenKind::FloatLiteral(fl) => write!(f, "Float({})", fl),
//             TokenKind::BoolLiteral(b) => write!(f, "Bool({})", b),
//             TokenKind::ColourLiteral(c) => write!(f, "Colour({:?})", c),
//             TokenKind::EndOfFile => write!(f, "EndOfFile"),
//             TokenKind::Identifier(s) => write!(f, "Identifier({s})"),
//             TokenKind::Asterisk => write!(f, "Asterisk"),
//             TokenKind::DoubleQuote => write!(f, "DoubleQuote"),
//         }
//     }
// }
